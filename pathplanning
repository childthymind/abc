% function [path_grid, path_length] = pathPlanning(start, goal, map)
% 输入参数：
% start: 起点坐标，形如 [x, y] 的向量
% goal: 终点坐标，形如 [x, y] 的向量
% map: 栅格地图，二维矩阵，0表示可以通过的栅格，1表示障碍
map=[0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;
     0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0;
     0 0 0 0 0 0 0 1 1 0 1 0 0 0 1 0 0 0 0 0;
     0 0 1 0 0 0 0 1 1 0 0 0 0 0 1 0 0 0 0 0;
     0 0 0 0 0 0 0 0 0 1 0 0 1 0 1 0 0 0 0 0;
     0 1 0 1 1 0 0 0 0 1 1 1 0 0 1 0 0 0 0 0;
     0 1 1 0 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0;
     0 0 0 0 0 1 1 0 1 0 1 1 0 1 1 0 0 0 0 0;
     0 1 1 1 0 1 1 1 1 0 1 0 1 1 1 0 0 0 0 0;
     0 0 0 0 0 0 0 1 0 1 0 1 0 0 1 1 1 0 0 0;
     0 0 1 0 1 0 1 0 1 0 1 0 1 1 1 0 0 0 0 0;
     0 0 0 0 0 0 1 1 0 0 1 0 0 0 0 0 1 0 0 0;
     0 0 0 0 0 1 0 1 1 0 0 1 0 1 0 1 1 0 0 0;
     0 0 0 0 0 0 0 1 0 0 1 0 1 0 1 0 0 0 0 0;
     0 0 1 1 0 0 1 1 0 1 0 1 0 1 1 1 1 0 0 0;
     0 0 1 1 0 0 1 1 1 0 1 0 1 0 1 0 1 0 0 0;
     0 0 0 0 1 1 1 1 1 0 1 0 0 0 0 1 1 1 1 0; 
     0 0 0 0 0 0 1 0 0 1 0 0 0 0 1 0 1 1 1 0;
     0 0 0 0 0 0 0 0 1 0 1 1 0 0 1 0 1 1 0 0;
     sizemap=size(map);
start=[1,1];
z=sizemap(1,1);
goal=[z,z];
% 参数设定
num_bees = 100;             % 蜜蜂数量
num_iterations = 50;        % 迭代次数
max_trials = 50;            % 最大试验次数
elite_bees_ratio = 0.3;     % 精英蜜蜂比例
scout_bees_ratio = 0.3;     % 搜索蜜蜂比例

% 设计适应度函数
fitness_func = @(x) fitnessFunction(x, map);

% 初始化蜜蜂群体
bees = initializeBees(num_bees,map,start, goal);

% 迭代更新蜜蜂群体
for iter = 1:num_iterations
    % 更新精英蜜蜂
    elite_bees = selectEliteBees(bees, elite_bees_ratio, fitness_func);
    elite_bees = updateEliteBees(elite_bees, map);
    
    % 更新跟随蜜蜂
    follower_bees = selectFollowerBees(bees, elite_bees_ratio, fitness_func);
    follower_bees = updateFollowerBees(follower_bees, elite_bees, max_trials, map);
    
    % 更新搜索蜜蜂
    scout_bees = selectScoutBees(bees, scout_bees_ratio,map);
    scout_bees = updateScoutBees(scout_bees, start, goal, map);
    
    % 合并更新后的蜜蜂
    bees = [elite_bees; follower_bees; scout_bees];
end

% 选择最优路径
best_path = selectBestPath(bees, fitness_func);

% 将路径转换为栅格块坐标
path_grid = round(best_path./repmat(grid_size, size(best_path,1),1));

% 计算路径长度
path_length = getPathLength(best_path);
% end


function fitness = fitnessFunction(path, map)
% 计算路径的适应度
% 输入：
%   path: 1 x n数组，表示路径上每个点的索引
%   map: 地图矩阵，0表示通道，1表示障碍物
% 输出：
%   fitness: 路径的适应度值

% 计算路径长度
pathLength = getPathLength(path);

% 判断路径是否合法
if any(path)

    % 路径经过障碍物，设置适应度为无穷大
    fitness = Inf;
else
    % 路径合法，适应度为路径长度的倒数
    fitness = 1 / pathLength;
end
end

function length = getPathLength(path)
n = size(path, 1);

% 初始化距离矩阵，全部赋值为0
dist = zeros(n, n);

% 计算每个相邻点之间的距离
for i = 1:n-1
      if path(i,1) == path(i+1,1) || path(i,2)== path(i+1,2)


            % 同行或同列的情况，距离为1
            dist(i+1,i+2) = 1;
        else
            % 对角线上的情况，距离为1.4
            dist(i+1,i+2) = 1.4;
        end
end
for i = 1:n
    dist(i,i) = 0;
end

% 计算每个相邻点之间的距离和
sum_dist = sum(sum(dist));
length = sum_dist;
end

function bees = initializeBees(n, map, start, goal)
% 初始化蜜蜂
% n: 蜜蜂数量
% map: 地图
% start: 起始点
% goal: 目标点
% bees: 初始化后的蜜蜂

% 初始化蜜蜂
bees = zeros(n, 2);
for i = 1:n
    % 随机生成蜜蜂位置
    x = randi(size(map, 1));
    y = randi(size(map, 2));
    while map(x,y) == 1 % 确保位置不在障碍物上
        x = randi(size(map, 1));
        y = randi(size(map, 2));
    end
    bees(i,:) = [x,y];
end

% 将起始点和目标点加入蜜蜂位置中
bees(1,:) = start;
bees(end,:) = goal;
end


function [elite_bees, elite_fitness] = selectEliteBees(bees, elite_bees_ratio, fitness_func)
% 首先计算每个蜜蜂的适应度
fitness = fitness_func(bees);

% 计算需要选择的最佳蜜蜂数量
elite_bees_count = round(length(bees) * elite_bees_ratio);

% 找到适应度最高的蜜蜂
[elite_fitness, elite_indexes] = sort(fitness, 'descend');

leng_elite=size(elite_indexes);
if(leng_elite<elite_bees_count)
    elite_bees = bees(elite_indexes(1:leng_elite), :);
else
elite_bees = bees(elite_indexes(1:elite_bees_count), :);
end
end


function elite_bees = updateEliteBees(elite_bees, map)
% 输入：当前精英蜜蜂的位置elite_bees，地图map
% 输出：更新后的精英蜜蜂的位置elite_bees

% 生成一个随机方向矩阵delta
delta = -1 + 2 * rand(size(elite_bees));

% 计算新位置
new_pos = elite_bees + delta;

% 判断是否越界或者在障碍物中，如果是则将位置设置为当前位置
for i = 1:size(new_pos, 1)
    x = round(new_pos(i, 1));
    y = round(new_pos(i, 2));
    if x < 1 || x > size(map, 1) || y < 1 || y > size(map, 2) || map(x, y) == 1
        new_pos(i, :) = elite_bees(i, :);
    end
end

% 返回更新后的精英蜜蜂位置矩阵
elite_bees = new_pos;
end


function [follower_bees, follower_fitness] = selectFollowerBees(bees, elite_bees_ratio, fitness_func)
    % 计算每只蜜蜂的适应度
    fitness = fitness_func(bees);

    % 找到适应度排名在前 elite_bees_ratio 的蜜蜂
    elite_bees_count = round(size(bees, 1) * elite_bees_ratio);
    [~, elite_indexes] = sort(fitness, 'descend');
    leng_elite=size(elite_indexes);
    if(leng_elite < elite_bees_count)
        elite_indexes = elite_indexes(1:leng_elite);
    else
    elite_indexes = elite_indexes(1:elite_bees_count);
    end

    % 排除掉 elite_bees，其余的蜜蜂成为跟随蜜蜂
    follower_bees = bees;
    follower_bees(elite_indexes, :) = [];
    follower_fitness = fitness;
    follower_fitness(elite_indexes) = [];
end



function new_follower_bees = updateFollowerBees(follower_bees, elite_bees, max_trials, map)
    num_followers = size(follower_bees, 1);
    num_dimensions = size(follower_bees, 2);
    new_follower_bees = zeros(num_followers, num_dimensions);
    
    for i = 1:num_followers
        trial = 0;
        while trial < max_trials
            % 选择一个随机的精英蜜蜂
            elite_bee_index = randi(size(elite_bees, 1));
            % 产生新位置
            new_position = generateNewPosition(follower_bees(i, :), elite_bees(elite_bee_index, :), map);
            % 如果新位置的适应度更好，更新当前位置
            if fitnessFunction(new_position, map) > fitnessFunction(follower_bees(i, :), map)
                new_follower_bees(i, :) = new_position;
                break;
            end
            trial = trial + 1;
        end
        % 如果所有尝试都失败了，说明这个跟随蜜蜂陷入了局部最优解，将其变成侦查蜜蜂
        if trial == max_trials
            new_follower_bees(i, :) = generateNewPosition(follower_bees(i, :), [], map);
        end
    end
end

function [new_pos] = generateNewPosition(current_pos, elite_pos, map)
% 选择一个随机方向，移动到随机距离
rand_dir = randi([1, 8]);
rand_dist = randi([1, 3]);
new_pos = current_pos;

% 根据随机方向更新新位置
switch rand_dir
    case 1
        new_pos(1) = current_pos(1) + rand_dist;
        new_pos(2) = current_pos(2) + rand_dist;
    case 2
        new_pos(1) = current_pos(1) + rand_dist;
        new_pos(2) = current_pos(2);
    case 3
        new_pos(1) = current_pos(1) + rand_dist;
        new_pos(2) = current_pos(2) - rand_dist;
    case 4
        new_pos(1) = current_pos(1);
        new_pos(2) = current_pos(2) - rand_dist;
    case 5
        new_pos(1) = current_pos(1) - rand_dist;
        new_pos(2) = current_pos(2) - rand_dist;
    case 6
        new_pos(1) = current_pos(1) - rand_dist;
        new_pos(2) = current_pos(2);
    case 7
        new_pos(1) = current_pos(1) - rand_dist;
        new_pos(2) = current_pos(2) + rand_dist;
    case 8
        new_pos(1) = current_pos(1);
        new_pos(2) = current_pos(2) + rand_dist;
end

% 如果新位置越界，则不更新
if new_pos(1) < 1 || new_pos(1) > size(map, 1) || new_pos(2) < 1 || new_pos(2) > size(map, 2) || map(new_pos(1), new_pos(2)) == 1
    new_pos = current_pos;
end

% 如果新位置与精英蜜蜂位置重合，则不更新
if isequal(new_pos, elite_pos)
    new_pos = current_pos;
end

end



function scout_bees = selectScoutBees(bees, scout_bees_ratio,map)
% 从所有蜜蜂中选择一部分作为侦查蜂
% 参数：
%   bees - 所有蜜蜂的位置
%   scout_bees_ratio - 侦查蜂数量占总数的比例
% 返回值：
%   scout_bees - 侦查蜂的位置

% 计算需要选择的侦查蜂数量
num_bees = size(bees, 1);
num_scout_bees = round(num_bees * scout_bees_ratio);

% 在地图范围内随机选择侦查蜂的位置
map_size = size(map);
scout_bees = randi(map_size, num_scout_bees, 2);
end

function new_scout_bees = updateScoutBees(scout_bees, start, goal, map)
% 获取侦查蜂个数
num_scout_bees = size(scout_bees, 1);

% 对每一只侦查蜂
for i = 1:num_scout_bees
    % 随机生成新位置
    new_pos = [randi(size(map,1)), randi(size(map,2))];

    % 如果新位置是障碍物或者已经被访问过，则重新生成
    while (map(new_pos(1), new_pos(2)) ~= 0 || any(ismember(new_pos, scout_bees(i,:),'rows')))
        new_pos = [randi(size(map,1)), randi(size(map,2))];
    end

    % 更新侦查蜂位置
    scout_bees(i, :) = new_pos;
end

% 重新计算侦查蜂路径长度
[scout_path] =  [scout_bees ; start; goal] ;
scout_bees_path_lengths = getPathLength(scout_path );

% 将路径长度为0的侦查蜂重新随机生成位置
zero_indices = find(scout_bees_path_lengths == 0);
for i = 1:numel(zero_indices)
    new_pos = [randi(size(map,1)), randi(size(map,2))];
    while (map(new_pos(1), new_pos(2)) ~= 0 || any(ismember(new_pos, scout_bees,'rows')))
        new_pos = [randi(size(map,1)), randi(size(map,2))];
    end
    scout_bees(zero_indices(i), :) = new_pos;
end

new_scout_bees = scout_bees;

end



function [bestPath, bestLength] = selectBestPath(positions, paths)
% positions：所有蜜蜂的位置，每行表示一个蜜蜂的位置
% paths：所有蜜蜂的路径，每行表示一个蜜蜂的路径
% bestPath：最佳路径，表示为一串栅格块的索引
% bestLength：最佳路径长度

% 计算每个蜜蜂路径的长度
pathLengths = zeros(size(positions, 1), 1);
for i = 1:size(positions, 1)
    pathLengths(i) = getPathLength(paths(i,:));
end

% 选择路径长度最小的蜜蜂路径作为最佳路径
[bestLength, bestIdx] = min(pathLengths);
bestPath = paths(bestIdx,:);

end

function path = generateRandomPath(start, goal, map)
% start：起始点，表示为一维坐标
% goal：目标点，表示为一维坐标
% map：栅格地图，包括障碍物和空地
% path：随机路径，表示为一串栅格块的索引

% 生成起始点到目标点的直线路径
linePath = generateLinePath(start, goal, map);

% 随机扰动直线路径，生成随机路径
path = addNoiseToPath(linePath, map);

end

function path = generateLinePath(start, goal, map)
% start：起始点，表示为一维坐标
% goal：目标点，表示为一维坐标
% map：栅格地图，包括障碍物和空地
% path：直线路径，表示为一串栅格块的索引

% 将一维坐标转化为二维坐标
[startY, startX] = ind2sub(size(map), start);
[goalY, goalX] = ind2sub(size(map), goal);
startY = start(1,2);
startX = start(1,1);
goalY  = goal(1,2);
goalX  = goal(1,1);
% 生成起始点到目标点的直线路径
path = sub2ind(size(map), round(linspace(startY, goalY, max(abs(startY-goalY), abs(startX-goalX)))), ...
    round(linspace(startX, goalX, max(abs(startY-goalY), abs(startX-goalX))))); 

end

function noisyPath = addNoiseToPath(path, map)
% path：路径，表示为一串栅格块的索引
% map：栅格地图，包括障碍物和空地
% noisyPath：加入随机扰动后的路径，表示为一串栅格块的索引

% 获取路径的行列坐标
[pathY, pathX] = ind2sub(size(map), path);

% 生成随机扰动
randX = randn(size(pathX))*0.1;
randY = randn(size(pathY))*0.1;

% 将路径加入随机扰动
noisyPath = sub2ind(size(map), round(pathY+randY), round(pathX+randX));

% 剔除路径中的重复栅格块
noisyPath = unique(noisyPath);

end
